{"version":3,"sources":["components/Square/Piece/Piece.js","components/Square/Square.js","constants.js","utilities/getMove.js","components/Chessboard/legalMoveFunctions.js","components/Chessboard/augmentBoardFunctions.js","components/Chessboard/Chessboard.js","components/CreateMove/CreateMove.js","components/InformationPanel/InformationPanel.js","components/Toggle/Toggle.js","App.js","reportWebVitals.js","index.js"],"names":["Piece","props","pieceName","this","color","piece","className","src","alt","Component","Square","state","wasClicked","bind","pieceColor","squareColor","selected","onClick","setPosition","rowCord","colCord","PIECE_MAPPINGS","1","3","4","5","9","10","COLOR_MAPPINGS","0","BLANK_SQUARE","BACKEND_ENDPOINT","getMove","boardStateHash","axios","method","url","params","then","response","error","squareHasPiece","board","position","whiteBishopLegalMove","initialPosition","finalPosition","finalPositionIsPossible","rDirection","Math","abs","cDirection","noBlockingPiece","i","whiteRookLegalMove","whiteLegalMove","auxBoardState","result","intermediary","_","isEqual","whitePawnLegalMove","whiteKnightLegalMove","whiteCanCastle","whiteKingLegalMove","blackBishopLegalMove","blackRookLegalMove","blackLegalMove","blackPawnLegalMove","blackKnightLegalMove","blackCanCastle","blackKingLegalMove","replaceSquare","newBoard","slice","pieceMoveFinal","board1","board2","board3","whiteCastlesKingside","whiteCastlesQueenside","blackCastlesKingside","blackCastlesQueenside","whiteTakesEnPassant","blackTakesEnPassant","newItem","normalPieceMove","Chessboard","r","c","setState","legalMove","piecePositions","auxBoardStateHelper","hashPosition","setBestMove","colorToMove","buildBoard","construct8","rc","rowNumber","squares","cols","row","push","col","hasOwnProperty","hashCode","s","hash","length","charCodeAt","stateString","toString","setPositionHash","CreateMove","submitMove","e","preventDefault","elements","document","getElementById","formData","item","id","value","boardState","data","JSON","stringify","headers","onSubmit","encType","htmlFor","required","type","placeholder","name","rows","form","InformationPanel","printBestMove","items","bestMove","n","traps","risks","rewards","initialPos","finalPos","descs","trap","S","risk","reward","desc","html","console","log","ToggleSwitch","checked","onChange","optionLabels","small","disabled","target","tabIndex","onKeyDown","keyCode","handleKeyPress","data-yes","data-no","defaultProps","App","useState","positionHash","setHash","viewOrCreate","setViewOrCreate","Toggle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.93eb921c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Piece.scss'\n\nclass Piece extends Component {\n  constructor(props) {\n    super(props);\n    ;\n  }\n\n  render() {\n    // because the image is in the public folder, we can access it like this\n    const pieceName = `/pieces/${this.props.color}${this.props.piece}.png`;\n    return (\n        <img className=\"piece\" src={pieceName} alt=\"chess piece\" />\n    );\n  }\n}\n\nexport default Piece;\n","import React, { Component } from 'react';\nimport Piece from './Piece/Piece.js';\nimport './Square.scss';\n\nclass Square extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.wasClicked = this.wasClicked.bind(this);\n  }\n\n  render() {\n    let piece = null;\n    // if there's a piece at this square, create it\n    if ((this.props.pieceName) && (this.props.pieceColor)) {\n      piece = <Piece color={this.props.pieceColor} piece={this.props.pieceName} />\n    }\n  \n    let squareColor = this.props.selected ? 'orangeSquare' : this.props.color;\n\n    // the square we render is a colored div with an Piece object in the center\n    return (\n      <button className={squareColor} onClick = {this.wasClicked}>\n        {piece}\n      </button>\n    );\n  }\n  wasClicked(){\n    this.props.setPosition(this.props.rowCord,this.props.colCord);\n  }\n}\n\nexport default Square;\n","export const PIECE_MAPPINGS = {1:'Pawn', 3:'Knight', 4:'Bishop', 5:'Rook', 9:'Queen', 10:'King'};\nexport const COLOR_MAPPINGS = {0: 'white', 1:'black'};\nexport const BLANK_SQUARE = [2,2];\nexport const BACKEND_ENDPOINT = \"https://e5nuoi3g98.execute-api.us-east-1.amazonaws.com/Test/\"","import axios from 'axios';\nimport { BACKEND_ENDPOINT } from '../constants.js';\n\nconst getMove = (boardStateHash) => {\n    return axios({method: 'get', url: `${BACKEND_ENDPOINT}nextmove`,\n        params: {\n            'board': boardStateHash\n        }\n    })\n    .then((response) => {\n        return response\n    }, (error) => {\n        return error;\n    });\n}\n\nexport default getMove;\n","\nimport _ from 'lodash';\n\n//helper function to see if a square has black, white, or no piece\nexport function squareHasPiece(board, position){\n  return board[position[0]][position[1]][0];\n}\n\n// the following functions are called in whiteLegalMove() depending on the piece\nexport function whiteKingLegalMove(board, initialPosition, finalPosition, auxBoardState){\n  let whiteCanCastle = auxBoardState[0];\n\n  if (_.isEqual(finalPosition, [7,6]) && _.isEqual(initialPosition, [7,4]) &&  whiteCanCastle){\n    return (squareHasPiece(board, [7,5])=== 2) && (squareHasPiece(board, [7,6]) ===2);\n  }else if (_.isEqual(finalPosition,[7,2]) && _.isEqual(initialPosition, [7,4]) && whiteCanCastle){\n    return (squareHasPiece(board, [7,1]) === 2) &&\n            (squareHasPiece(board, [7,2]) === 2) &&\n            (squareHasPiece(board, [7,3]) === 2);\n  }\n\n  //main logic\n  let result = false;\n  let finalPositionIsPossible = (Math.abs(finalPosition[0]-initialPosition[0]) < 2 &&\n                                  Math.abs(finalPosition[1]-initialPosition[1]) < 2);\n  if (finalPositionIsPossible){\n    result = (squareHasPiece(board, finalPosition) !== 0);\n  }\n  return result;\n}\n\nexport function whitePawnLegalMove(board, initialPosition, finalPosition, auxBoardState) {\n  let result = false;\n  let intermediary = [initialPosition[0]-1, initialPosition[1]];\n\n  // En Passant stuff\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]-1,auxBoardState[3][1]])){\n    // console.log(\"valid en passant\");\n    return true;\n  }\n\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]-1,auxBoardState[3][1]])){\n    // console.log(\"valid en passant\");\n    return true;\n  }\n\n  if (_.isEqual([initialPosition[0]-2, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, intermediary) === 2 &&\n    squareHasPiece(board, finalPosition) === 2 &&\n    initialPosition[0] === 6;\n  }\n  if (_.isEqual([initialPosition[0]-1, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 2;\n  }\n  else if (_.isEqual([initialPosition[0]-1, initialPosition[1]+1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 1;\n  }\n  else if (_.isEqual([initialPosition[0]-1, initialPosition[1]-1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 1;\n  }\n  return result;\n}\n\nexport function whiteKnightLegalMove(board, initialPosition, finalPosition){\n\n  let finalPositionIsPossible =\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]-1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]-1], finalPosition));\n\n  let result = finalPositionIsPossible && (squareHasPiece(board, finalPosition)!==0);\n\n  return result;\n}\n\nexport function whiteBishopLegalMove(board, initialPosition, finalPosition){\n\n  let finalPositionIsPossible =\n  (finalPosition[0]-initialPosition[0]) === (finalPosition[1]-initialPosition[1]) ||\n  (finalPosition[0]-initialPosition[0]) === (-1)*(finalPosition[1]-initialPosition[1]);\n  if (!finalPositionIsPossible){return false}\n  let rDirection = (finalPosition[0]-initialPosition[0])/Math.abs((finalPosition[0]-initialPosition[0]));\n  let cDirection = (finalPosition[1]-initialPosition[1])/Math.abs((finalPosition[1]-initialPosition[1]));\n  let noBlockingPiece = true;\n  for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n    if (squareHasPiece(\n      board,\n      [ initialPosition[0] + i*rDirection , initialPosition[1] + i*cDirection ])\n      !== 2) {noBlockingPiece = false;}\n  }\n\n  let result = finalPositionIsPossible &&\n    squareHasPiece(board,finalPosition)!==0&&\n    noBlockingPiece;\n  return result;\n}\n\nexport function whiteRookLegalMove(board, initialPosition, finalPosition){\n  let rDirection = 0;\n  let cDirection = 0;\n\n  if(!((finalPosition[0]-initialPosition[0] === 0) ||(finalPosition[1]-initialPosition[1] === 0))){\n    return false;\n  }\n\n  if (finalPosition[0]-initialPosition[0]===0){\n    if(finalPosition[1]-initialPosition[1]>0){\n      cDirection = 1;\n    }else{\n      cDirection = -1;\n    }\n  }else{\n    if(finalPosition[0]-initialPosition[0]>0){\n      rDirection = 1;\n    }else{\n      rDirection = -1;\n    }\n  }\n\n  let noBlockingPiece = true;\n\n\n  if (rDirection !== 0){\n    for (let i = 1; i<Math.abs(finalPosition[0]-initialPosition[0]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0] + i*rDirection, initialPosition[1]])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }else{\n    for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0], initialPosition[1]+i*cDirection])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }\n\n  let result =\n    squareHasPiece(board,finalPosition)!==0&&\n    noBlockingPiece;\n  return result;\n}\n\n//called in legalMove() if the piece being evaluated is white\nexport function whiteLegalMove(board, piece, initialPosition, finalPosition, auxBoardState){\n  let result = false;\n  if (piece === 1) result = whitePawnLegalMove(board, initialPosition, finalPosition, auxBoardState)\n  else if (piece === 3) result = whiteKnightLegalMove(board, initialPosition, finalPosition)\n  else if (piece === 4) result = whiteBishopLegalMove(board, initialPosition, finalPosition)\n  else if (piece === 5) result = whiteRookLegalMove(board, initialPosition, finalPosition)\n  else if (piece === 9) {\n    result =  whiteRookLegalMove(board, initialPosition, finalPosition) ||\n    whiteBishopLegalMove(board, initialPosition, finalPosition);\n  }else if (piece === 10){\n    result = whiteKingLegalMove(board, initialPosition, finalPosition, auxBoardState);\n  }\n  return result;\n}\n\n//the following functions are called in blackLegalMove() depending on the piece\nexport function blackKingLegalMove(board, initialPosition, finalPosition, auxBoardState){\n\n  let blackCanCastle = auxBoardState[1];\n  //seperate logic for castling\n  if (_.isEqual(finalPosition, [0,6]) && _.isEqual(initialPosition, [0,4]) && blackCanCastle){\n    // console.log(\"in correct conditional\");\n    return (squareHasPiece(board, [0,5])=== 2) && (squareHasPiece(board, [0,6]) ===2);\n  }else if (_.isEqual(finalPosition, [0,2]) && _.isEqual(initialPosition, [0,4]) && blackCanCastle){\n    return (squareHasPiece(board, [0,1]) === 2) &&\n            (squareHasPiece(board, [0,2]) === 2) &&\n            (squareHasPiece(board, [0,3]) === 2);\n  }\n\n  // main logic\n  let result = false;\n  let finalPositionIsPossible = (Math.abs(finalPosition[0]-initialPosition[0]) < 2 &&\n                                  Math.abs(finalPosition[1]-initialPosition[1]) < 2);\n  if (finalPositionIsPossible){\n    result = (squareHasPiece(board, finalPosition) !== 1);\n  }\n  return result;\n}\n\nexport function blackPawnLegalMove(board, initialPosition, finalPosition, auxBoardState) {\n\n  let result = false;\n  let intermediary = [initialPosition[0]+1, initialPosition[1]];\n\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]+1,auxBoardState[3][1]])){\n    // console.log(\"valid en passant\");\n    return true;\n  }\n\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]+1,auxBoardState[3][1]])){\n    // console.log(\"valid en passant\");\n    return true;\n  }\n\n  if (_.isEqual([initialPosition[0]+2, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, intermediary) === 2 &&\n    squareHasPiece(board, finalPosition) === 2 &&\n    initialPosition[0] === 1;\n  }\n  if (_.isEqual([initialPosition[0]+1, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 2;\n  }\n  else if (_.isEqual([initialPosition[0]+1, initialPosition[1]+1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 0;\n  }\n  else if (_.isEqual([initialPosition[0]+1, initialPosition[1]-1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 0;\n  }\n  return result;\n}\n\nexport function blackKnightLegalMove(board, initialPosition, finalPosition){\n\n  let finalPositionIsPossible =\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]-1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]-1], finalPosition));\n\n  let result = finalPositionIsPossible && (squareHasPiece(board, finalPosition)!==1);\n\n  return result;\n}\n\nexport function blackBishopLegalMove(board, initialPosition, finalPosition){\n\n  let finalPositionIsPossible =\n  (finalPosition[0]-initialPosition[0]) === (finalPosition[1]-initialPosition[1]) ||\n  (finalPosition[0]-initialPosition[0]) === (-1)*(finalPosition[1]-initialPosition[1]);\n  if (!finalPositionIsPossible){return false}\n  let rDirection = (finalPosition[0]-initialPosition[0])/Math.abs((finalPosition[0]-initialPosition[0]));\n  let cDirection = (finalPosition[1]-initialPosition[1])/Math.abs((finalPosition[1]-initialPosition[1]));\n  let noBlockingPiece = true;\n  for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n    if (squareHasPiece(\n      board,\n      [ initialPosition[0] + i*rDirection , initialPosition[1] + i*cDirection ])\n      !== 2) {noBlockingPiece = false;}\n  }\n\n  let result = finalPositionIsPossible &&\n    squareHasPiece(board,finalPosition)!==1&&\n    noBlockingPiece;\n  return result;\n}\n\nexport function blackRookLegalMove(board, initialPosition, finalPosition){\n  let rDirection = 0;\n  let cDirection = 0;\n\n  if(!((finalPosition[0]-initialPosition[0] === 0) ||(finalPosition[1]-initialPosition[1] === 0))){\n    return false;\n  }\n\n  if (finalPosition[0]-initialPosition[0]===0){\n    if(finalPosition[1]-initialPosition[1]>0){\n      cDirection = 1;\n    }else{\n      cDirection = -1;\n    }\n  }else{\n    if(finalPosition[0]-initialPosition[0]>0){\n      rDirection = 1;\n    }else{\n      rDirection = -1;\n    }\n  }\n  let noBlockingPiece = true;\n\n  if (rDirection !== 0){\n    for (let i = 1; i<Math.abs(finalPosition[0]-initialPosition[0]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0] + i*rDirection, initialPosition[1]])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }else{\n    for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0], initialPosition[1]+i*cDirection])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }\n\n  let result =\n    squareHasPiece(board,finalPosition)!==1&&\n    noBlockingPiece;\n  return result;\n}\n\n//is called in legal move if the piece being evaluated is black\nexport function blackLegalMove(board, piece, initialPosition, finalPosition, auxBoardState){\n  let result = false;\n  if (piece === 1) result = blackPawnLegalMove(board, initialPosition, finalPosition, auxBoardState)\n  else if (piece === 3) result = blackKnightLegalMove(board, initialPosition, finalPosition)\n  else if (piece === 4) result = blackBishopLegalMove(board, initialPosition, finalPosition)\n  else if (piece === 5) result = blackRookLegalMove(board, initialPosition, finalPosition)\n  else if (piece === 9) {\n    result =  blackRookLegalMove(board, initialPosition, finalPosition) ||\n    blackBishopLegalMove(board, initialPosition, finalPosition);\n  }else if (piece === 10){\n    result = blackKingLegalMove(board, initialPosition, finalPosition, auxBoardState);\n  }\n  return result;\n}\n\n//checks if a move is legal\nexport function legalMove(board, piece, color, initialPosition, finalPosition, auxBoardState){\n  let result = false;\n  if (color === 0){\n    result = whiteLegalMove(board, piece, initialPosition, finalPosition, auxBoardState);\n  }else if (color === 1){\n    result = blackLegalMove(board, piece, initialPosition, finalPosition, auxBoardState);\n  }\n  return result && auxBoardState[2]===color;\n}\n\nexport function isWhiteKingInCheck(board, auxBoardState) {\n\n  let kingCoordinates = [-1,-1]\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (_.isEqual(board[i][j], [0,10])){\n        kingCoordinates = [i,j];\n      }\n    }\n  }\n\n  if (_.isEqual(kingCoordinates,[-1,-1])){\n    return false;\n  }\n\n  let kingInCheck = false;\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (board[i][j][0]===1){\n        kingInCheck = blackLegalMove(board, board[i][j][1], [i,j], kingCoordinates, auxBoardState);\n        if (kingInCheck){\n          // console.log(\"white king is in check\");\n          return true;\n        }\n      }\n    }\n  }\n  return kingInCheck;\n}\n\nexport function isBlackKingInCheck(board, auxBoardState) {\n\n  let kingCoordinates = [-1,-1]\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (_.isEqual(board[i][j], [1,10])){\n        kingCoordinates = [i,j];\n      }\n    }\n  }\n\n  if (_.isEqual(kingCoordinates,[-1,-1])){\n    return false;\n  }\n\n  let kingInCheck = false;\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (board[i][j][0]===0){\n        kingInCheck = whiteLegalMove(board, board[i][j][1], [i,j],kingCoordinates, auxBoardState);\n        if (kingInCheck){\n          // .log(\"black king is in check\");\n          return true;\n        }\n      }\n    }\n  }\n  return kingInCheck;\n}\n","import { PIECE_MAPPINGS, COLOR_MAPPINGS, BLANK_SQUARE } from '../../constants.js';\nimport _ from 'lodash';\n\n//replaces the content of a square with the desired piece or BLANK_SQUARE\nexport function replaceSquare(board, position, piece){\n  let newBoard = board.slice();\n  newBoard[position[0]][position[1]] = piece;\n  return newBoard;\n}\n\nexport function pieceMoveFinal(board, initialPosition, finalPosition, auxBoardState){\n\n  if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [0,10]) &&\n        _.isEqual(initialPosition, [7,4]) &&\n        _.isEqual(finalPosition, [7,6])){return whiteCastlesKingside(board)}\n\n  else if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [0,10]) &&\n        _.isEqual(initialPosition, [7,4]) &&\n        _.isEqual(finalPosition, [7,2])){return whiteCastlesQueenside(board)}\n\n  else if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [1,10]) &&\n        _.isEqual(initialPosition, [0,4]) &&\n        _.isEqual(finalPosition, [0,6])){return blackCastlesKingside(board)}\n\n  else if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [1,10]) &&\n        _.isEqual(initialPosition, [0,4]) &&\n        _.isEqual(finalPosition, [0,2])){return blackCastlesQueenside(board)}\n\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [0,1])){\n          return whiteTakesEnPassant(board, initialPosition, finalPosition);\n        }\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [0,1])){\n          return whiteTakesEnPassant(board, initialPosition, finalPosition);\n        }\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [1,1])){\n          return blackTakesEnPassant(board, initialPosition, finalPosition);\n        }\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [1,1])){\n          return blackTakesEnPassant(board, initialPosition, finalPosition);\n        }\n\n  return normalPieceMove(board, initialPosition, finalPosition);\n}\n\nexport function normalPieceMove(board, initialPosition, finalPosition){\n  let newItem = board[initialPosition[0]][initialPosition[1]].slice();\n  let result = replaceSquare(\n    replaceSquare(board, finalPosition, newItem),\n    initialPosition,\n    BLANK_SQUARE);\n  return result;\n}\n\nexport function whiteCastlesKingside(board){\n  let board1 = replaceSquare(board, [7,4], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [7,5], [0,5]);\n  let board3 = replaceSquare(board2, [7,6], [0,10]);\n  let result = replaceSquare(board3, [7,7], BLANK_SQUARE);\n  return result;\n}\nexport function whiteCastlesQueenside(board){\n  let board1 = replaceSquare(board, [7,0], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [7,2], [0,10]);\n  let board3 = replaceSquare(board2, [7,3], [0,5]);\n  let result = replaceSquare(board3, [7,4], BLANK_SQUARE);\n  return result;\n}\n\nexport function blackCastlesKingside(board){\n  let board1 = replaceSquare(board, [0,4], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [0,5], [1,5]);\n  let board3 = replaceSquare(board2, [0,6], [1,10]);\n  let result = replaceSquare(board3, [0,7], BLANK_SQUARE);\n  return result;\n}\nexport function blackCastlesQueenside(board){\n  let board1 = replaceSquare(board, [0,0], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [0,2], [1,10]);\n  let board3 = replaceSquare(board2, [0,3], [1,5]);\n  let result = replaceSquare(board3, [0,4], BLANK_SQUARE);\n  return result;\n}\n\nexport function whiteTakesEnPassant(board, initialPosition, finalPosition) {\n  let board1 = replaceSquare(board, initialPosition, BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [3,finalPosition[1]],BLANK_SQUARE);\n  let board3 = replaceSquare(board2, finalPosition, [0,1]);\n  return board3;\n}\n\nexport function blackTakesEnPassant(board, initialPosition, finalPosition) {\n  let board1 = replaceSquare(board, initialPosition, BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [4,finalPosition[1]],BLANK_SQUARE);\n  let board3 = replaceSquare(board2, finalPosition, [1,1]);\n  return board3;\n}\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport Square from '../Square/Square.js';\nimport { PIECE_MAPPINGS, COLOR_MAPPINGS, BLANK_SQUARE } from '../../constants.js';\nimport getMove from '../../utilities/getMove.js'\nimport './Chessboard.scss';\nimport { legalMove, isWhiteKingInCheck, isBlackKingInCheck} from './legalMoveFunctions.js';\nimport { pieceMoveFinal } from './augmentBoardFunctions.js';\n\nclass Chessboard extends Component {\n  constructor(props) {\n    super(props);\n    // initial state is resting state of the board, this will change\n    // piece positions are encoded as [<color>, <pieceName>] (mappings for these numbers can be found in the src/constants.js file)\n\n    this.state={\n\n      piecePositions:\n        [\n          [[1,5], [1,3], [1,4], [1,9], [1,10], [1,4], [1,3], [1,5]],\n          [[1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1]],\n          [[0,5], [0,3], [0,4], [0,9], [0,10], [0,4], [0,3], [0,5]]\n        ],\n        // [if W can castle, if B can castle, who's turn, can a pawn be taken en passant]\n        auxBoardState: [true,true,0,null],\n        initialPosition: null\n    }\n    // allows setPosition's \"this\" calls to always refer to the chessboard object\n    this.setPosition = this.setPosition.bind(this);\n    this.hashPosition = this.hashPosition.bind(this);\n\n    let stateString = this.state.piecePositions.toString()+'|'+\n    this.state.auxBoardState.toString();\n    let result = this.hashCode(stateString);\n    this.props.setPositionHash(result);\n  }\n\n  // marks a position as either initial or final state\n  setPosition = (r, c) => {\n    // if an initial has already been clicked\n    if (this.state.initialPosition) {\n      // if the same square clicked twice, just reset the initial position to null\n      if(_.isEqual(this.state.initialPosition, [r,c])){\n        this.setState({initialPosition: null});\n        return\n      }\n      //otherwise check if this is a legal move\n      if (legalMove(this.state.piecePositions,\n        this.state.piecePositions[this.state.initialPosition[0]][this.state.initialPosition[1]][1],\n        this.state.piecePositions[this.state.initialPosition[0]][this.state.initialPosition[1]][0],\n        this.state.initialPosition, [r,c], this.state.auxBoardState) === false){return}\n      //otherwise make the move\n      let newBoard = pieceMoveFinal(this.state.piecePositions,\n                                    this.state.initialPosition,\n                                    [r,c], this.state.auxBoardState);\n\n      //make sure the en Passant value is changed\n      let auxBoardStateHelper = this.state.auxBoardState.slice();\n      if (newBoard[r][c][1]===1 && Math.abs(this.state.initialPosition[0]-r) === 2){\n        auxBoardStateHelper[3] = [r,c];\n      }else{\n        auxBoardStateHelper[3] = null;\n      }\n      this.setState({auxBoardState: auxBoardStateHelper});\n\n      ///what is this magic below\n      getMove(this.hashPosition()).then((response) => {\n        this.props.setBestMove(response);\n      });\n\n      this.setState({initialPosition: null, piecePositions: newBoard})\n\n      let colorToMove = (auxBoardStateHelper[2]+1)%2;\n      auxBoardStateHelper[2]=colorToMove;\n      this.setState({auxBoardState: auxBoardStateHelper});\n\n\n      //isWhiteKingInCheck(this.state.piecePositions, this.state.auxBoardState);\n      //isBlackKingInCheck(this.state.piecePositions, this.state.auxBoardState);\n\n    }\n    else {\n      // otherwise set this as the initial if it isn't blank\n      if(!_.isEqual(this.state.piecePositions[r][c], BLANK_SQUARE)){\n        this.setState({initialPosition: [r,c]});\n      }\n    }\n  }\n\n  // this method returns the html for the board (an HTML table element)\n  buildBoard = () => {\n    // this is a method we use to build the board--it constructs the grid that we'll wrap with <table> elements\n    // rc is 'r' if we're building table rows and 'c' for building columns -- this function is recursive, so that flag is necessary\n    // rowNumber is an integer we use to track our position in the table when instantiation squares\n    const construct8 = (rc, rowNumber) => {\n        // when we're in the row section of our recursion, 'squares' contains rows of squares\n        // when we're in the column section of our recursion, 'squares' contains a list of squares\n        let squares = [];\n        for (let i=0; i < 8; i+=1){\n            // if we're building a row\n            if (rc === 'r'){\n                //construct the 8 column elements in that row\n                let cols = construct8('c', i)\n                //wrap those columns in a <tr> (table row) html element\n                let row = <tr key={i}>{cols}</tr>\n                //add this row to the list of rows that will make our board\n                squares.push(row)\n            }\n            // if we're building a column\n            else {\n              // if our row and column idx mod 2 are equal, the square is light, otherwise dark\n              let color = rowNumber%2===i%2 ? 'whiteSquare' : 'blackSquare'\n              squares.push(((row, col) => {\n                let pieceName = null;\n                let pieceColor = null;\n                // if the piece at the current position is a piece (as opposed to empty)\n                if (COLOR_MAPPINGS.hasOwnProperty(this.state.piecePositions[row][col][0])) {\n                  pieceColor = COLOR_MAPPINGS[this.state.piecePositions[row][col][0]];\n                  pieceName = PIECE_MAPPINGS[this.state.piecePositions[row][col][1]];\n                }\n                let selected = _.isEqual([row,col], this.state.initialPosition) ? true : false;\n                // returns a square wrapped in <th> elements\n                return  <th className=\"squareContainer\" key={i} >\n                          <Square selected={selected} rowCord={rowNumber} colCord={i} color={color} pieceColor={pieceColor} pieceName={pieceName} setPosition={this.setPosition}/>\n                        </th>\n                })(rowNumber, i) //calls the function to return the square we just created into the array\n              );\n            }\n        }\n        return squares;\n    }\n    // buildBoard returns this HTML--table element wrappers around the matrix of squares created by construct8('r')\n    return (\n        <table className='board'><tbody className='board'>{construct8('r')}</tbody></table>\n      );\n  }\n\n  hashCode = function(s) {\n    var hash = 0;\n    if (s.length === 0) {\n        return hash;\n    }\n    for (var i = 0; i < s.length; i++) {\n        var char = s.charCodeAt(i);\n        hash = ((hash<<5)-hash)+char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n}\n  hashPosition(){\n    let stateString = this.state.piecePositions.toString()+'|'+\n    this.state.auxBoardState.toString();\n    let result = this.hashCode(stateString);\n    this.props.setPositionHash(result);\n    return result;\n  }\n\n  // rendering the chessboard means displaying the result HTML from buildBoard()\n  render() {\n    return (\n      this.buildBoard()\n    );\n  }\n}\n\n\n\nexport default Chessboard;\n","import React, { Component } from 'react';\nimport './CreateMove.scss';\nimport {BACKEND_ENDPOINT} from \"../../constants.js\"\nimport axios from 'axios';\n\nclass CreateMove extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.submitMove = this.submitMove.bind(this);\n  }\n\n    submitMove = (e) => {\n        // prevent refresh on submit\n        e.preventDefault();\n        // get form.data stored into variable \"formData\"\n        var elements = document.getElementById(\"moveForm\").elements;\n        var formData = {};\n        for(var i = 0; i < elements.length; i++){\n            var item = elements[i];\n            formData[item.id] = item.value;\n        }\n        formData.board = this.props.boardState.toString();\n\n        //use axios like getMove.js does, store form.data in the request\n        //posts data to test server\n        return axios({method: \"post\", url: `${BACKEND_ENDPOINT}postmove`,\n            data: JSON.stringify(formData),\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then((response) => {\n            return response\n        }, (error) => {\n            return error;\n        });\n    }\n\n  render() {\n    return (\n        <form id=\"moveForm\" onSubmit={this.submitMove} encType=\"multipart/form-data\">\n            <div className='formTitle'>\n                <h2>Create Trap</h2>\n            </div>\n            <div className=\"moveFormDiv\">\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"risk\">Trap Name:</label>\n                    <input className=\"formInput\" id=\"name\" required type=\"text\" placeholder=\"Trap Name\"/><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"desc\">Description:</label><br/>\n                        <textarea required id='desc' name=\"dexc\" rows=\"7\" cols=\"30\"></textarea>\n                    </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"reward\">Initial Piece Position</label>\n                    <input className=\"formInput\" required id=\"pos1\" type=\"text\" placeholder=\"f7, Ke1, etc.\"/><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"reward\">Final Piece Position</label>\n                    <input className=\"formInput\" required id=\"pos2\" type=\"text\" placeholder=\"f6, e2, etc.\"/><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"risk\">Risk Level:</label>\n                    <select className=\"formInput\" id=\"risk\" name=\"risklist\" form=\"moveForm\">\n                        <option value=\"low\">Low</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"high\">High</option>=\n                    </select><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"reward\">Reward Level:</label>\n                    <select className=\"formInput\" id=\"reward\" name=\"rewardlist\" form=\"moveForm\">\n                        <option value=\"low\">Low</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"high\">High</option>\n                    </select><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"color\">Color to Play:</label>\n                    <select className=\"formInput\" id=\"color\" name=\"colorlist\" form=\"moveForm\">\n                        <option value=\"white\">White</option>\n                        <option value=\"black\">Black</option>\n                    </select><br/>\n                </div>\n            </div>\n            <div className='submitContainer'>\n                <input className=\"submitButton\" required type=\"submit\" value=\"Submit\"/>\n            </div>\n        </form>\n    );\n  }\n}\n\nexport default CreateMove;\n","import React, { Component } from 'react';\nimport './InformationPanel.scss';\n\nclass InformationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.printBestMove = this.printBestMove.bind(this);\n  }\n\n  printBestMove = () => {\n      let items = [];\n      //get data from props\n      if(this.props.bestMove.data) {\n          let n = this.props.bestMove.data.length;\n          let traps = [];\n          let risks = [];\n          let rewards = [];\n          let initialPos = [];\n          let finalPos = [];\n          let descs = [];\n          //organize lists of attributes\n          for (let i = 0; i < n; i++) {\n              traps.push(this.props.bestMove.data[i].trap.S);\n              risks.push(this.props.bestMove.data[i].risk.S);\n              rewards.push(this.props.bestMove.data[i].reward.S);\n              initialPos.push(this.props.bestMove.data[i].initialPosition.S);\n              finalPos.push(this.props.bestMove.data[i].finalPosition.S);\n              descs.push(this.props.bestMove.data[i].desc.S);\n          }\n          //print each trap from list of attributes\n          for (let i = 0; i < n; i++) {\n              items.push({ \n                  name: traps[i],\n                  risk: risks[i],\n                  reward: rewards[i],\n                  initialPos: initialPos[i],\n                  finalPos: finalPos[i],\n                  desc: descs[i],\n              });\n          }\n      }\n      return items;\n  };\n\n  render(){\n    let traps = this.printBestMove();\n    let n = traps.length;\n    let html = [];\n    let arrow = \" -> \"\n    //print each trap with an empty line between\n    for (let i = 0; i < n; i++) {\n      console.log(traps[i].name);\n        html.push(\n          <div className='trapBox' key={i+1}>\n            <div className='trapBorderExperiment'>\n              <div className='trapContent'>\n                <h4 className='trapTitle'>{traps[i].name}</h4>\n                <div className='trapInfoContainer'> \n                  <p className='trapInfo'>{traps[i].initialPos}{arrow}{traps[i].finalPos}</p>\n                  <p className=\"trapInfo\">Risk: {traps[i].risk}, Reward: {traps[i].reward}  </p>\n                  <p className=\"trapInfo\">{traps[i].desc}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )\n    }\n    //end of html\n    html.push(<div key = {n+1}></div>);\n\n    return (\n            <div className='infoContainer'>\n              <div className='infoTitle'>\n                <h2>Available Traps</h2>\n              </div>\n              <div className='infoContentContainer'> \n                {html}\n              </div>\n            </div>\n          );\n  }\n}\n\nexport default InformationPanel\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './ToggleSwitch.css';\n\n/*\nToggle Switch Component\nNote: id, checked and onChange are required for ToggleSwitch component to function.\nThe props name, small, disabled and optionLabels are optional.\nUsage: <ToggleSwitch id={id} checked={value} onChange={checked => setValue(checked)}} />\n*/\n\nconst ToggleSwitch = ({ id, name, checked, onChange, optionLabels, small, disabled }) => {\n  function handleKeyPress(e){\n    if (e.keyCode !== 32) return;\n\n    e.preventDefault();\n    onChange(!checked)\n  }\n\n  return (\n    <div className={\"toggle-switch\" + (small ? \" small-switch\" : \"\")}>\n      <input\n        type=\"checkbox\"\n        name={name}\n        className=\"toggle-switch-checkbox\"\n        id={id}\n        checked={checked}\n        onChange={e => onChange(e.target.checked)}\n        disabled={disabled}\n        />\n        {id ? (\n          <label className=\"toggle-switch-label\"\n                 htmlFor={id}\n                 tabIndex={ disabled ? -1 : 1 }\n                 onKeyDown={ (e) => { handleKeyPress(e) }}>\n            <span\n              className={\n                disabled\n                  ? \"toggle-switch-inner toggle-switch-disabled\"\n                  : \"toggle-switch-inner\"\n              }\n              data-yes={optionLabels[0]}\n              data-no={optionLabels[1]}\n              tabIndex={-1}\n            />\n            <span\n              className={\n              disabled\n                ? \"toggle-switch-switch toggle-switch-disabled\"\n                : \"toggle-switch-switch\"\n              }\n              tabIndex={-1}\n            />\n          </label>\n        ) : null}\n      </div>\n    );\n}\n\n// Set optionLabels for rendering.\nToggleSwitch.defaultProps = {\n  optionLabels: [\"Play\", \"Create\"],\n};\n\nToggleSwitch.propTypes = {\n  id: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  optionLabels: PropTypes.array,\n  small: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n\nexport default ToggleSwitch;","import './App.scss';\nimport Chessboard from './components/Chessboard/Chessboard.js';\nimport CreateMove from './components/CreateMove/CreateMove.js';\nimport InformationPanel from './components/InformationPanel/InformationPanel.js'\nimport React, { useState } from 'react';\nimport ToggleSwitch from './components/Toggle/Toggle';\n\nfunction App() {\n\n  const [positionHash, setHash] = useState(0);\n  const [bestMove, setBestMove] = useState(0);\n  const [viewOrCreate, setViewOrCreate] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <div className=\"leftSide\" >\n        < Chessboard  setPositionHash={setHash} setBestMove={setBestMove} />\n      </div>\n      <div className=\"rightSide\">\n        {viewOrCreate===false ? (\n        <> \n          <div className=\"formComponentContainer\" >\n            < CreateMove boardState={positionHash}/>\n          </div>\n        </>\n        ) : (\n        <> \n          <div className = \"infoComponentContainer\">\n            <InformationPanel  bestMove={bestMove}/>\n          </div>\n        </>\n        )}\n        <div className=\"toggleContainer\">\n          <ToggleSwitch id='functionToggle' checked={viewOrCreate} onChange={setViewOrCreate}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}