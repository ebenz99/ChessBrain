{"version":3,"sources":["components/Square/Piece/Piece.js","components/Square/Square.js","constants.js","utilities/getMove.js","components/Chessboard/augmentBoardFunctions.js","components/Chessboard/legalMoveFunctions.js","components/Chessboard/Chessboard.js","components/CreateMove/CreateMove.js","components/InformationPanel/InformationPanel.js","components/StatusBox/StatusBox.js","components/Toggle/Toggle.js","components/Dropdown/Dropdown.js","App.js","reportWebVitals.js","index.js"],"names":["Piece","props","pieceName","this","color","piece","className","src","alt","Component","Square","state","wasClicked","bind","pieceColor","squareColor","selected","onClick","setPosition","rowCord","colCord","PIECE_MAPPINGS","1","3","4","5","9","10","COLOR_MAPPINGS","0","BLANK_SQUARE","BACKEND_ENDPOINT","getMove","boardStateHash","axios","method","url","params","then","response","error","replaceSquare","board","position","newBoard","slice","pieceMoveFinal","initialPosition","finalPosition","auxBoardState","_","isEqual","board1","board2","board3","whiteCastlesKingside","whiteCastlesQueenside","blackCastlesKingside","blackCastlesQueenside","whiteTakesEnPassant","blackTakesEnPassant","normalPieceMove","newItem","squareHasPiece","whiteBishopLegalMove","castling","finalPositionIsPossible","rDirection","Math","abs","cDirection","noBlockingPiece","i","whiteRookLegalMove","whiteLegalMove","result","intermediary","whitePawnLegalMove","auxboardState","whiteKnightLegalMove","whiteCanCastle","whiteCanCastleKingside","whiteCanCastleQueenside","spaceIsClear","notThroughCheck","isWhiteKingInCheck","whiteKingLegalMove","blackBishopLegalMove","blackRookLegalMove","blackLegalMove","blackPawnLegalMove","blackKnightLegalMove","blackCanCastle","blackCanCastleKingside","blackCanCastleQueenside","isBlackKingInCheck","blackKingLegalMove","legalMove","kingCoordinates","j","kingInCheck","Chessboard","r","c","setState","stateCopy","cloneDeep","piecePositions","boardClone","auxBoardStateClone","castlingClone","newBoardClone","newAuxBoardStateClone","newCastlingClone","boardStateChange","hashPosition","setBestMove","buildBoard","construct8","rc","rowNumber","squares","cols","row","push","col","hasOwnProperty","hashCode","s","hash","length","charCodeAt","stateString","toString","setPositionHash","aux","setColorToMove","takeSnapshot","setDefaultBoard","argumentArrayClone","defaultBoard","console","log","name","name_copy","split","join","snapshot","boardStateLibrary","set","setBoardStateLibrary","CreateMove","submitMove","e","preventDefault","elements","document","getElementById","formData","item","id","value","boardState","data","JSON","stringify","headers","setStatus","onSubmit","encType","htmlFor","required","type","placeholder","rows","form","InformationPanel","printBestMove","items","bestMove","n","traps","risks","rewards","initialPos","finalPos","descs","trap","S","risk","reward","desc","colorSelectedHelper","colorSelected","colorToMove","html","StatusBox","disappear","status","setTimeout","statusBoxID","titleID","textID","title","text","ToggleSwitch","checked","onChange","optionLabels","small","disabled","target","tabIndex","onKeyDown","keyCode","handleKeyPress","data-yes","data-no","defaultProps","library","add","faBars","Dropdown","menuDown","toggle","entries","key","pasteSnapshot","icon","size","faHistory","faCamera","faPlus","App","useState","positionHash","setHash","viewOrCreate","setViewOrCreate","whiteOrBlack","setWhiteOrBlack","Map","boardReference","useRef","current","copySnapshot","addToBoardLibrary","ref","Toggle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e163e9bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Piece.scss'\n\nclass Piece extends Component {\n  constructor(props) {\n    super(props);\n    ;\n  }\n\n  render() {\n    // because the image is in the public folder, we can access it like this\n    const pieceName = `/pieces/${this.props.color}${this.props.piece}.png`;\n    return (\n        <img className=\"piece\" src={pieceName} alt=\"chess piece\" />\n    );\n  }\n}\n\nexport default Piece;\n","import React, { Component } from 'react';\nimport Piece from './Piece/Piece.js';\nimport './Square.scss';\n\nclass Square extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.wasClicked = this.wasClicked.bind(this);\n  }\n\n  render() {\n    let piece = null;\n    // if there's a piece at this square, create it\n    if ((this.props.pieceName) && (this.props.pieceColor)) {\n      piece = <Piece color={this.props.pieceColor} piece={this.props.pieceName} />\n    }\n  \n    let squareColor = this.props.selected ? 'orangeSquare' : this.props.color;\n\n    // the square we render is a colored div with an Piece object in the center\n    return (\n      <button className={squareColor} onClick = {this.wasClicked}>\n        {piece}\n      </button>\n    );\n  }\n  wasClicked(){\n    this.props.setPosition(this.props.rowCord,this.props.colCord);\n  }\n}\n\nexport default Square;\n","export const PIECE_MAPPINGS = {1:'Pawn', 3:'Knight', 4:'Bishop', 5:'Rook', 9:'Queen', 10:'King'};\nexport const COLOR_MAPPINGS = {0: 'white', 1:'black'};\nexport const BLANK_SQUARE = [2,2];\nexport const BACKEND_ENDPOINT = \"https://e5nuoi3g98.execute-api.us-east-1.amazonaws.com/Test/\"","import axios from 'axios';\nimport { BACKEND_ENDPOINT } from '../constants.js';\n\nconst getMove = (boardStateHash) => {\n    return axios({method: 'get', url: `${BACKEND_ENDPOINT}nextmove`,\n        params: {\n            'board': boardStateHash\n        }\n    })\n    .then((response) => {\n        return response\n    }, (error) => {\n        return error;\n    });\n}\n\nexport default getMove;\n","import { BLANK_SQUARE } from '../../constants.js';\nimport _ from 'lodash';\n\n//replaces the content of a square with the desired piece or BLANK_SQUARE\nexport function replaceSquare(board, position, piece){\n  let newBoard = board.slice();\n  newBoard[position[0]][position[1]] = piece;\n  return newBoard;\n}\n\nexport function pieceMoveFinal(board, initialPosition, finalPosition, auxBoardState){\n\n  if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [0,10]) &&\n        _.isEqual(initialPosition, [7,4]) &&\n        _.isEqual(finalPosition, [7,6])){return whiteCastlesKingside(board)}\n\n  else if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [0,10]) &&\n        _.isEqual(initialPosition, [7,4]) &&\n        _.isEqual(finalPosition, [7,2])){return whiteCastlesQueenside(board)}\n\n  else if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [1,10]) &&\n        _.isEqual(initialPosition, [0,4]) &&\n        _.isEqual(finalPosition, [0,6])){return blackCastlesKingside(board)}\n\n  else if (_.isEqual(board[initialPosition[0]][initialPosition[1]], [1,10]) &&\n        _.isEqual(initialPosition, [0,4]) &&\n        _.isEqual(finalPosition, [0,2])){return blackCastlesQueenside(board)}\n\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [0,1])){\n          return whiteTakesEnPassant(board, initialPosition, finalPosition);\n        }\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [0,1])){\n          return whiteTakesEnPassant(board, initialPosition, finalPosition);\n        }\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [1,1])){\n          return blackTakesEnPassant(board, initialPosition, finalPosition);\n        }\n  else if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n        _.isEqual(board[initialPosition[0]][initialPosition[1]], [1,1])){\n          return blackTakesEnPassant(board, initialPosition, finalPosition);\n        }\n\n  return normalPieceMove(board, initialPosition, finalPosition);\n}\n\nexport function normalPieceMove(board, initialPosition, finalPosition){\n  let newItem = board[initialPosition[0]][initialPosition[1]].slice();\n  let result = replaceSquare(\n    replaceSquare(board, finalPosition, newItem),\n    initialPosition,\n    BLANK_SQUARE);\n  return result;\n}\n\nexport function whiteCastlesKingside(board){\n  let board1 = replaceSquare(board, [7,4], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [7,5], [0,5]);\n  let board3 = replaceSquare(board2, [7,6], [0,10]);\n  let result = replaceSquare(board3, [7,7], BLANK_SQUARE);\n  return result;\n}\nexport function whiteCastlesQueenside(board){\n  let board1 = replaceSquare(board, [7,0], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [7,2], [0,10]);\n  let board3 = replaceSquare(board2, [7,3], [0,5]);\n  let result = replaceSquare(board3, [7,4], BLANK_SQUARE);\n  return result;\n}\n\nexport function blackCastlesKingside(board){\n  let board1 = replaceSquare(board, [0,4], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [0,5], [1,5]);\n  let board3 = replaceSquare(board2, [0,6], [1,10]);\n  let result = replaceSquare(board3, [0,7], BLANK_SQUARE);\n  return result;\n}\nexport function blackCastlesQueenside(board){\n  let board1 = replaceSquare(board, [0,0], BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [0,2], [1,10]);\n  let board3 = replaceSquare(board2, [0,3], [1,5]);\n  let result = replaceSquare(board3, [0,4], BLANK_SQUARE);\n  return result;\n}\n\nexport function whiteTakesEnPassant(board, initialPosition, finalPosition) {\n  let board1 = replaceSquare(board, initialPosition, BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [3,finalPosition[1]],BLANK_SQUARE);\n  let board3 = replaceSquare(board2, finalPosition, [0,1]);\n  return board3;\n}\n\nexport function blackTakesEnPassant(board, initialPosition, finalPosition) {\n  let board1 = replaceSquare(board, initialPosition, BLANK_SQUARE);\n  let board2 = replaceSquare(board1, [4,finalPosition[1]],BLANK_SQUARE);\n  let board3 = replaceSquare(board2, finalPosition, [1,1]);\n  return board3;\n}\n\nexport function boardStateChange (board, initialPosition, finalPosition, auxBoardState, castling){\n  let boardClone = _.cloneDeep(board);\n  let auxBoardStateClone = _.cloneDeep(auxBoardState);\n  let castlingClone = _.cloneDeep(castling);\n\n  let newBoardClone = pieceMoveFinal(board, initialPosition, finalPosition, auxBoardState);\n  let newAuxBoardStateClone = auxBoardStateClone;\n  let newCastlingClone = castlingClone;\n\n  if (\n    boardClone[initialPosition[0]][initialPosition[1]] === 1 &&\n    Math.abs(initialPosition[0]-finalPosition[0])===2\n  ){\n    newAuxBoardStateClone[3] = _.cloneDeep(finalPosition);\n  }else {\n    newAuxBoardStateClone[3] = null;\n  }\n  if (_.isEqual(boardClone[initialPosition[0]][initialPosition[1]], [0,10])){\n    newAuxBoardStateClone[0] = false;\n  } else if (_.isEqual(boardClone[initialPosition[0]][initialPosition[1]], [1,10])){\n    newAuxBoardStateClone[1] = false;\n  } else if (_.isEqual(initialPosition, [7,0])){\n    newCastlingClone[1] = false;\n  } else if (_.isEqual(initialPosition, [7,7])){\n    newCastlingClone[0] = false;\n  } else if (_.isEqual(initialPosition, [0,0])){\n    newCastlingClone[4] = false;\n  } else if (_.isEqual(initialPosition, [0,7])){\n    newCastlingClone[3] = false;\n  }\n\n  if (!newAuxBoardStateClone[0]){\n    newCastlingClone[0] = false;\n    newCastlingClone[1] = false;\n  }\n\n  if (!newAuxBoardStateClone[1]){\n    newCastlingClone[3] = false;\n    newCastlingClone[4] = false;\n  }\n  if (!newCastlingClone[0] && !newCastlingClone[1]){\n    newAuxBoardStateClone[0] = false;\n  }\n  if (!newCastlingClone[2] && !newCastlingClone[3]){\n    newAuxBoardStateClone[1] = false;\n  }\n\n  newAuxBoardStateClone[2] = (auxBoardStateClone[2]+1) % 2;\n  return [newBoardClone, newAuxBoardStateClone, newCastlingClone];\n}\n","\nimport _ from 'lodash';\nimport {normalPieceMove, pieceMoveFinal} from \"./augmentBoardFunctions.js\";\n\n//helper function to see if a square has black, white, or no piece\nexport function squareHasPiece(board, position){\n  return board[position[0]][position[1]][0];\n}\n// the following functions are called in whiteLegalMove() depending on the piece\nexport function whiteKingLegalMove(board, initialPosition, finalPosition, auxBoardState, castling){\n  let whiteCanCastle = auxBoardState[0];\n  let whiteCanCastleKingside = castling[0];\n  let whiteCanCastleQueenside = castling[1];\n  // check if the move is a kingside castle and white can kingside castle\n  if (\n    _.isEqual(finalPosition, [7,6]) &&\n    _.isEqual(initialPosition, [7,4]) &&\n    whiteCanCastle && whiteCanCastleKingside){\n    //check if there  are pieces in between king and rook spots\n    let spaceIsClear = (squareHasPiece(board, [7,5])=== 2) && (squareHasPiece(board, [7,6]) === 2)\n    //check if we are castling through Check\n    let notThroughCheck = !(\n      isWhiteKingInCheck(board, auxBoardState, castling) ||\n      isWhiteKingInCheck(normalPieceMove(board, initialPosition,[7,5]), auxBoardState, castling) ||\n      isWhiteKingInCheck(normalPieceMove(board, initialPosition,[7,6]), auxBoardState, castling)\n    )\n    return spaceIsClear && notThroughCheck;\n  }\n  //check if the move is a queenside castle and white can queenside castle\n  else if (\n    _.isEqual(finalPosition,[7,2]) &&\n    _.isEqual(initialPosition, [7,4]) &&\n    whiteCanCastle && whiteCanCastleQueenside){\n    //check if there a pieces between king and rook\n    let spaceIsClear = (\n      (squareHasPiece(board, [7,1]) === 2) &&\n      (squareHasPiece(board, [7,2]) === 2) &&\n      (squareHasPiece(board, [7,3]) === 2)\n    );\n    //check if we are castling through check\n    let notThroughCheck = !(\n      isWhiteKingInCheck(board, auxBoardState, castling) ||\n      isWhiteKingInCheck(normalPieceMove(board, initialPosition,[7,3]), auxBoardState, castling) ||\n      isWhiteKingInCheck(normalPieceMove(board, initialPosition,[7,2]), auxBoardState, castling)\n    )\n    return spaceIsClear && notThroughCheck;\n  }\n\n  //main logic\n  let result = false;\n  let finalPositionIsPossible = (Math.abs(finalPosition[0]-initialPosition[0]) < 2 &&\n                                  Math.abs(finalPosition[1]-initialPosition[1]) < 2);\n  if (finalPositionIsPossible){\n    result = (squareHasPiece(board, finalPosition) !== 0);\n  }\n  return result;\n}\n\nexport function whitePawnLegalMove(board, initialPosition, finalPosition, auxBoardState, castling) {\n  let result = false;\n  let intermediary = [initialPosition[0]-1, initialPosition[1]];\n\n  // En Passant stuff\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]-1,auxBoardState[3][1]])){\n    return true;\n  }\n\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]-1,auxBoardState[3][1]])){\n    return true;\n  }\n\n  if (_.isEqual([initialPosition[0]-2, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, intermediary) === 2 &&\n    squareHasPiece(board, finalPosition) === 2 &&\n    initialPosition[0] === 6;\n  }\n  if (_.isEqual([initialPosition[0]-1, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 2;\n  }\n  else if (_.isEqual([initialPosition[0]-1, initialPosition[1]+1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 1;\n  }\n  else if (_.isEqual([initialPosition[0]-1, initialPosition[1]-1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 1;\n  }\n  return result;\n}\n\nexport function whiteKnightLegalMove(board, initialPosition, finalPosition, auxboardState, castling){\n\n  let finalPositionIsPossible =\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]-1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]-1], finalPosition));\n\n  let result = finalPositionIsPossible && (squareHasPiece(board, finalPosition)!==0);\n\n  return result;\n}\n\nexport function whiteBishopLegalMove(board, initialPosition, finalPosition, auxBoardState, castling){\n\n  let finalPositionIsPossible =\n  (finalPosition[0]-initialPosition[0]) === (finalPosition[1]-initialPosition[1]) ||\n  (finalPosition[0]-initialPosition[0]) === (-1)*(finalPosition[1]-initialPosition[1]);\n  if (!finalPositionIsPossible){return false}\n  let rDirection = (finalPosition[0]-initialPosition[0])/Math.abs((finalPosition[0]-initialPosition[0]));\n  let cDirection = (finalPosition[1]-initialPosition[1])/Math.abs((finalPosition[1]-initialPosition[1]));\n  let noBlockingPiece = true;\n  for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n    if (squareHasPiece(\n      board,\n      [ initialPosition[0] + i*rDirection , initialPosition[1] + i*cDirection ])\n      !== 2) {noBlockingPiece = false;}\n  }\n\n  let result = finalPositionIsPossible &&\n    squareHasPiece(board,finalPosition)!==0&&\n    noBlockingPiece;\n  return result;\n}\n\nexport function whiteRookLegalMove(board, initialPosition, finalPosition, auxBoardState, castling){\n  let rDirection = 0;\n  let cDirection = 0;\n\n  if(!((finalPosition[0]-initialPosition[0] === 0) ||(finalPosition[1]-initialPosition[1] === 0))){\n    return false;\n  }\n\n  if (finalPosition[0]-initialPosition[0]===0){\n    if(finalPosition[1]-initialPosition[1]>0){\n      cDirection = 1;\n    }else{\n      cDirection = -1;\n    }\n  }else{\n    if(finalPosition[0]-initialPosition[0]>0){\n      rDirection = 1;\n    }else{\n      rDirection = -1;\n    }\n  }\n\n  let noBlockingPiece = true;\n\n\n  if (rDirection !== 0){\n    for (let i = 1; i<Math.abs(finalPosition[0]-initialPosition[0]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0] + i*rDirection, initialPosition[1]])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }else{\n    for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0], initialPosition[1]+i*cDirection])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }\n\n  let result =\n    squareHasPiece(board,finalPosition)!==0&&\n    noBlockingPiece;\n  return result;\n}\n\n//called in legalMove() if the piece being evaluated is white\nexport function whiteLegalMove(board, piece, initialPosition, finalPosition, auxBoardState, castling){\n  let result = false;\n  if (piece === 1) result = whitePawnLegalMove(board, initialPosition, finalPosition, auxBoardState, castling)\n  else if (piece === 3) result = whiteKnightLegalMove(board, initialPosition, finalPosition, castling)\n  else if (piece === 4) result = whiteBishopLegalMove(board, initialPosition, finalPosition, castling)\n  else if (piece === 5) result = whiteRookLegalMove(board, initialPosition, finalPosition, castling)\n  else if (piece === 9) {\n    result =  whiteRookLegalMove(board, initialPosition, finalPosition, castling) ||\n    whiteBishopLegalMove(board, initialPosition, finalPosition, castling);\n  }else if (piece === 10){\n    result = whiteKingLegalMove(board, initialPosition, finalPosition, auxBoardState, castling);\n  }\n  return result;\n}\n\n//the following functions are called in blackLegalMove() depending on the piece\nexport function blackKingLegalMove(board, initialPosition, finalPosition, auxBoardState, castling){\n\n  let blackCanCastle = auxBoardState[1];\n  let blackCanCastleKingside = castling[2];\n  let blackCanCastleQueenside = castling[3];\n  //seperate logic for castling\n  if (\n    _.isEqual(finalPosition, [0,6]) &&\n    _.isEqual(initialPosition, [0,4]) &&\n    blackCanCastle && blackCanCastleKingside){\n    let spaceIsClear = (squareHasPiece(board, [0,5])=== 2) && (squareHasPiece(board, [0,6]) === 2);\n    let notThroughCheck = !(\n      isBlackKingInCheck(board, auxBoardState, castling) ||\n      isBlackKingInCheck(normalPieceMove(board, initialPosition,[0,5]), auxBoardState, castling) ||\n      isBlackKingInCheck(normalPieceMove(board, initialPosition,[0,6]), auxBoardState, castling)\n    );\n    return spaceIsClear && notThroughCheck;\n  }\n  else if (\n    _.isEqual(finalPosition, [0,2]) &&\n    _.isEqual(initialPosition, [0,4]) &&\n    blackCanCastle && blackCanCastleQueenside){\n    let spaceIsClear = (\n      (squareHasPiece(board, [0,1]) === 2) &&\n      (squareHasPiece(board, [0,2]) === 2) &&\n      (squareHasPiece(board, [0,3]) === 2)\n    );\n    let notThroughCheck = !(\n      isBlackKingInCheck(board, auxBoardState, castling) ||\n      isBlackKingInCheck(normalPieceMove(board, initialPosition, [0,3]), auxBoardState, castling) ||\n      isBlackKingInCheck(normalPieceMove(board, initialPosition, [0,2]), auxBoardState, castling)\n    );\n\n    return spaceIsClear && notThroughCheck;\n  }\n\n  // main logic\n  let result = false;\n  let finalPositionIsPossible = (Math.abs(finalPosition[0]-initialPosition[0]) < 2 &&\n                                  Math.abs(finalPosition[1]-initialPosition[1]) < 2);\n  if (finalPositionIsPossible){\n    result = (squareHasPiece(board, finalPosition) !== 1);\n  }\n  return result;\n}\n\nexport function blackPawnLegalMove(board, initialPosition, finalPosition, auxBoardState, castling) {\n\n  let result = false;\n  let intermediary = [initialPosition[0]+1, initialPosition[1]];\n\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]+1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]+1,auxBoardState[3][1]])){\n    return true;\n  }\n\n  if(_.isEqual(auxBoardState[3], [initialPosition[0],initialPosition[1]-1]) &&\n      _.isEqual(finalPosition, [auxBoardState[3][0]+1,auxBoardState[3][1]])){\n    return true;\n  }\n\n  if (_.isEqual([initialPosition[0]+2, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, intermediary) === 2 &&\n    squareHasPiece(board, finalPosition) === 2 &&\n    initialPosition[0] === 1;\n  }\n  if (_.isEqual([initialPosition[0]+1, initialPosition[1]], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 2;\n  }\n  else if (_.isEqual([initialPosition[0]+1, initialPosition[1]+1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 0;\n  }\n  else if (_.isEqual([initialPosition[0]+1, initialPosition[1]-1], finalPosition)){\n    result = squareHasPiece(board, finalPosition) === 0;\n  }\n  return result;\n}\n\nexport function blackKnightLegalMove(board, initialPosition, finalPosition, castling){\n\n  let finalPositionIsPossible =\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]+2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+1, initialPosition[1]-2], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]-2, initialPosition[1]-1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]+1], finalPosition)) ||\n  (_.isEqual([initialPosition[0]+2, initialPosition[1]-1], finalPosition));\n\n  let result = finalPositionIsPossible && (squareHasPiece(board, finalPosition)!==1);\n\n  return result;\n}\n\nexport function blackBishopLegalMove(board, initialPosition, finalPosition, castling){\n\n  let finalPositionIsPossible =\n  (finalPosition[0]-initialPosition[0]) === (finalPosition[1]-initialPosition[1]) ||\n  (finalPosition[0]-initialPosition[0]) === (-1)*(finalPosition[1]-initialPosition[1]);\n  if (!finalPositionIsPossible){return false}\n  let rDirection = (finalPosition[0]-initialPosition[0])/Math.abs((finalPosition[0]-initialPosition[0]));\n  let cDirection = (finalPosition[1]-initialPosition[1])/Math.abs((finalPosition[1]-initialPosition[1]));\n  let noBlockingPiece = true;\n  for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n    if (squareHasPiece(\n      board,\n      [ initialPosition[0] + i*rDirection , initialPosition[1] + i*cDirection ])\n      !== 2) {noBlockingPiece = false;}\n  }\n\n  let result = finalPositionIsPossible &&\n    squareHasPiece(board,finalPosition)!==1&&\n    noBlockingPiece;\n  return result;\n}\n\nexport function blackRookLegalMove(board, initialPosition, finalPosition, castling){\n  let rDirection = 0;\n  let cDirection = 0;\n\n  if(!((finalPosition[0]-initialPosition[0] === 0) ||(finalPosition[1]-initialPosition[1] === 0))){\n    return false;\n  }\n\n  if (finalPosition[0]-initialPosition[0]===0){\n    if(finalPosition[1]-initialPosition[1]>0){\n      cDirection = 1;\n    }else{\n      cDirection = -1;\n    }\n  }else{\n    if(finalPosition[0]-initialPosition[0]>0){\n      rDirection = 1;\n    }else{\n      rDirection = -1;\n    }\n  }\n  let noBlockingPiece = true;\n\n  if (rDirection !== 0){\n    for (let i = 1; i<Math.abs(finalPosition[0]-initialPosition[0]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0] + i*rDirection, initialPosition[1]])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }else{\n    for (let i = 1; i<Math.abs(finalPosition[1]-initialPosition[1]); i++){\n      if (squareHasPiece(\n        board,\n        [ initialPosition[0], initialPosition[1]+i*cDirection])!== 2) {\n          noBlockingPiece = false;\n      }\n    }\n  }\n\n  let result =\n    squareHasPiece(board,finalPosition)!==1&&\n    noBlockingPiece;\n  return result;\n}\n\n//is called in legal move if the piece being evaluated is black\nexport function blackLegalMove(board, piece, initialPosition, finalPosition, auxBoardState, castling){\n  let result = false;\n  if (piece === 1) result = blackPawnLegalMove(board, initialPosition, finalPosition, auxBoardState, castling)\n  else if (piece === 3) result = blackKnightLegalMove(board, initialPosition, finalPosition, castling)\n  else if (piece === 4) result = blackBishopLegalMove(board, initialPosition, finalPosition, castling)\n  else if (piece === 5) result = blackRookLegalMove(board, initialPosition, finalPosition, castling)\n  else if (piece === 9) {\n    result =  blackRookLegalMove(board, initialPosition, finalPosition, castling) ||\n    blackBishopLegalMove(board, initialPosition, finalPosition, castling);\n  }else if (piece === 10){\n    result = blackKingLegalMove(board, initialPosition, finalPosition, auxBoardState, castling);\n  }\n  return result;\n}\n\n//checks if a move is legal\nexport function legalMove(board, piece, color, initialPosition, finalPosition, auxBoardState, castling){\n  let result = false;\n  if (color === 0){\n    result = whiteLegalMove(board, piece, initialPosition, finalPosition, auxBoardState, castling);\n  }else if (color === 1){\n    result = blackLegalMove(board, piece, initialPosition, finalPosition, auxBoardState, castling);\n  }\n  return result && auxBoardState[2]===color;\n}\n\nexport function isWhiteKingInCheck(board, auxBoardState, castling) {\n\n  let kingCoordinates = [-1,-1]\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (_.isEqual(board[i][j], [0,10])){\n        kingCoordinates = [i,j];\n      }\n    }\n  }\n\n  if (_.isEqual(kingCoordinates,[-1,-1])){\n    return false;\n  }\n\n  let kingInCheck = false;\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (board[i][j][0]===1){\n        kingInCheck = blackLegalMove(board, board[i][j][1], [i,j], kingCoordinates, auxBoardState, castling);\n        if (kingInCheck){\n          return true;\n        }\n      }\n    }\n  }\n  return kingInCheck;\n}\n\nexport function isBlackKingInCheck(board, auxBoardState, castling) {\n\n  let kingCoordinates = [-1,-1]\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (_.isEqual(board[i][j], [1,10])){\n        kingCoordinates = [i,j];\n      }\n    }\n  }\n\n  if (_.isEqual(kingCoordinates,[-1,-1])){\n    return false;\n  }\n\n  let kingInCheck = false;\n  for (let i=0; i<8; i++){\n    for(let j=0; j<8; j++){\n      if (board[i][j][0]===0){\n        kingInCheck = whiteLegalMove(board, board[i][j][1], [i,j],kingCoordinates, auxBoardState, castling);\n        if (kingInCheck){\n          // .log(\"black king is in check\");\n          return true;\n        }\n      }\n    }\n  }\n  return kingInCheck;\n}\n\nexport function legalMoveFinal(board, piece, color, initialPosition, finalPosition, auxBoardState, castling){\n  if (auxBoardState[2] === 0){\n    let result = legalMove(board, piece, color, initialPosition, finalPosition, auxBoardState, castling) &&\n        !isWhiteKingInCheck(pieceMoveFinal(board, initialPosition, finalPosition, auxBoardState),auxBoardState, castling);\n    return result;\n  }\n  if (auxBoardState[2] === 1){\n    let result = legalMove(board, piece, color, initialPosition, finalPosition, auxBoardState, castling) &&\n        !isBlackKingInCheck(pieceMoveFinal(board, initialPosition, finalPosition, auxBoardState), auxBoardState, castling);\n    return result;\n  }\n}\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport Square from '../Square/Square.js';\nimport { PIECE_MAPPINGS, COLOR_MAPPINGS, BLANK_SQUARE } from '../../constants.js';\nimport getMove from '../../utilities/getMove.js'\nimport './Chessboard.scss';\nimport { legalMoveFinal } from './legalMoveFunctions.js';\nimport { boardStateChange } from './augmentBoardFunctions.js';\n\nclass Chessboard extends Component {\n  constructor(props) {\n    super(props);\n    // initial state is resting state of the board, this will change\n    // piece positions are encoded as [<color>, <pieceName>] (mappings for these numbers can be found in the src/constants.js file)\n\n    this.state={\n\n      // the state that the chessboard will return to when we reset\n      // be default we want it to be the starting board.\n      piecePositions:\n        [\n          [[1,5], [1,3], [1,4], [1,9], [1,10], [1,4], [1,3], [1,5]],\n          [[1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1]],\n          [[0,5], [0,3], [0,4], [0,9], [0,10], [0,4], [0,3], [0,5]]\n        ],\n        // [if W can castle, if B can castle, who's turn, can a pawn be taken en passant]\n        auxBoardState: [true,true,0,null],\n        //if white can castle kingside, if white can castle queenside,\n        //if black can castle kinside, if black can castle queenside\n        castling: [true, true, true, true],\n        initialPosition: null\n    }\n    // allows setPosition's \"this\" calls to always refer to the chessboard object\n    this.setPosition = this.setPosition.bind(this);\n    this.hashPosition = this.hashPosition.bind(this);\n    // Give the rest of the app information on the initial Position;\n    let stateString = this.state.piecePositions.toString()+'|'+\n    this.state.auxBoardState.toString();\n    let result = this.hashCode(stateString);\n    this.props.setPositionHash(result);\n  }\n\n  // marks a position as either initial or final state\n  setPosition = (r, c) => {\n    // if an initial has already been clicked\n    if (this.state.initialPosition) {\n      // if the same square clicked twice, just reset the initial position to null\n      if(_.isEqual(this.state.initialPosition, [r,c])){\n        this.setState({initialPosition: null});\n        return;\n      }\n      //otherwise check if this is a legal move\n      let stateCopy = _.cloneDeep(this.state);\n      if (legalMoveFinal(stateCopy.piecePositions,\n        stateCopy.piecePositions[stateCopy.initialPosition[0]][stateCopy.initialPosition[1]][1],\n        stateCopy.piecePositions[stateCopy.initialPosition[0]][stateCopy.initialPosition[1]][0],\n        stateCopy.initialPosition, [r,c], stateCopy.auxBoardState, stateCopy.castling) === false){return;}\n\n      //otherwise make the move\n      let newBoard = boardStateChange(this.state.piecePositions,\n                                    this.state.initialPosition,\n                                    [r,c], this.state.auxBoardState, this.state.castling);\n\n      // Create new En Passant, colorToMove value, and castling values\n\n      this.setState({initialPosition: null, piecePositions: newBoard[0], auxBoardState: newBoard[1], castling: newBoard[2]});\n      ///what is this magic below\n      getMove(this.hashPosition(newBoard[0], newBoard[1], newBoard[2])).then((response) => {\n        this.props.setBestMove(response);\n      });\n      //isWhiteKingInCheck(this.state.piecePositions, this.state.auxBoardState);\n      //isBlackKingInCheck(this.state.piecePositions, this.state.auxBoardState);\n    }\n    else {\n      if (this.state.piecePositions[r][c][0] !== this.state.auxBoardState[2]){\n        return;\n      }\n      else {\n        this.setState({initialPosition: [r,c]});\n      }\n    }\n  }\n\n  // this method returns the html for the board (an HTML table element)\n  buildBoard = () => {\n    // this is a method we use to build the board--it constructs the grid that we'll wrap with <table> elements\n    // rc is 'r' if we're building table rows and 'c' for building columns -- this function is recursive, so that flag is necessary\n    // rowNumber is an integer we use to track our position in the table when instantiation squares\n    const construct8 = (rc, rowNumber) => {\n        // when we're in the row section of our recursion, 'squares' contains rows of squares\n        // when we're in the column section of our recursion, 'squares' contains a list of squares\n        let squares = [];\n        for (let i=0; i < 8; i+=1){\n            // if we're building a row\n            if (rc === 'r'){\n                //construct the 8 column elements in that row\n                let cols = construct8('c', i)\n                //wrap those columns in a <tr> (table row) html element\n                let row = <tr key={i}>{cols}</tr>\n                //add this row to the list of rows that will make our board\n                squares.push(row)\n            }\n            // if we're building a column\n            else {\n              // if our row and column idx mod 2 are equal, the square is light, otherwise dark\n              let color = rowNumber%2===i%2 ? 'whiteSquare' : 'blackSquare'\n              squares.push(((row, col) => {\n                let pieceName = null;\n                let pieceColor = null;\n                // if the piece at the current position is a piece (as opposed to empty)\n                if (COLOR_MAPPINGS.hasOwnProperty(this.state.piecePositions[row][col][0])) {\n                  pieceColor = COLOR_MAPPINGS[this.state.piecePositions[row][col][0]];\n                  pieceName = PIECE_MAPPINGS[this.state.piecePositions[row][col][1]];\n                }\n                let selected = _.isEqual([row,col], this.state.initialPosition) ? true : false;\n                // returns a square wrapped in <th> elements\n                return  <th className=\"squareContainer\" key={i} >\n                          <Square selected={selected} rowCord={rowNumber} colCord={i} color={color} pieceColor={pieceColor} pieceName={pieceName} setPosition={this.setPosition}/>\n                        </th>\n                })(rowNumber, i) //calls the function to return the square we just created into the array\n              );\n            }\n        }\n        return squares;\n    }\n    // buildBoard returns this HTML--table element wrappers around the matrix of squares created by construct8('r')\n    return (\n        <table className='board'><tbody className='board'>{construct8('r')}</tbody></table>\n      );\n  }\n\n  hashCode = function(s) {\n    var hash = 0;\n    if (s.length === 0) {\n        return hash;\n    }\n    for (var i = 0; i < s.length; i++) {\n        var char = s.charCodeAt(i);\n        hash = ((hash<<5)-hash)+char;\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    return hash;\n  }\n\n  hashPosition(board, aux, castling){\n    let stateString = board.toString()+'|'+\n    aux.toString() + '|' + castling.toString();\n    let result = this.hashCode(stateString);\n    this.props.setPositionHash(result);\n    this.props.setColorToMove(aux[2]);\n    return result;\n  }\n\n  takeSnapshot(){\n    let result = {\n      piecePositions: _.cloneDeep(this.state.piecePositions),\n      auxBoardState: _.cloneDeep(this.state.auxBoardState),\n      castling: _.cloneDeep(this.state.castling)\n    };\n    return result;\n  }\n\n  copySnapshot (){\n    let result = this.takeSnapshot();\n    this.props.setDefaultBoard(result);\n  }\n\n  pasteSnapshot (){\n    let argumentArrayClone = _.cloneDeep(this.props.defaultBoard);\n    this.setState(\n      {\n        piecePositions: argumentArrayClone.piecePositions,\n        auxBoardState: argumentArrayClone.auxBoardState,\n        castling: argumentArrayClone.castling\n      }\n    );\n    console.log(argumentArrayClone);\n    getMove(this.hashPosition(argumentArrayClone.piecePositions,\n       argumentArrayClone.auxBoardState,\n        argumentArrayClone.castling)).then((response) => {\n      this.props.setBestMove(response);\n    });\n  }\n  addToBoardLibrary(name){\n    let name_copy = (' ' + name).slice(1);\n    name_copy = name_copy.split(\" \").join(\"\");\n    console.log (\"|\"+name_copy+\"|\");\n    if (name_copy === \"\"){return}\n    let snapshot = this.takeSnapshot();\n    let boardStateLibrary = _.cloneDeep(this.props.boardStateLibrary);\n    let result = boardStateLibrary.set(name, snapshot);\n    this.props.setBoardStateLibrary(result);\n  }\n\n  // rendering the chessboard means displaying the result HTML from buildBoard()\n  render() {\n    return (\n      this.buildBoard()\n    );\n  }\n}\n\n\n\nexport default Chessboard;\n","import React, { Component } from 'react';\nimport './CreateMove.scss';\nimport {BACKEND_ENDPOINT} from \"../../constants.js\"\nimport axios from 'axios';\n\nclass CreateMove extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.submitMove = this.submitMove.bind(this);\n  }\n\n    submitMove = (e) => {\n        // prevent refresh on submit\n        e.preventDefault();\n        // get form.data stored into variable \"formData\"\n        var elements = document.getElementById(\"moveForm\").elements;\n        var formData = {};\n        for(var i = 0; i < elements.length; i++){\n            var item = elements[i];\n            formData[item.id] = item.value;\n        }\n        formData.board = this.props.boardState.toString();\n\n        //use axios like getMove.js does, store form.data in the request\n        //posts data to test server\n        return axios({method: \"post\", url: `${BACKEND_ENDPOINT}postmove`,\n            data: JSON.stringify(formData),\n            headers: { 'Content-Type': 'application/json' }\n        })\n        .then((response) => {\n            this.props.setStatus('good');\n            return response\n        }, (error) => {\n            this.props.setStatus('bad');\n            return error;\n        });\n    }\n\n  render() {\n    return (\n        <form id=\"moveForm\" onSubmit={this.submitMove} encType=\"multipart/form-data\">\n            <div className='formTitle'>\n                <h2>Create Trap</h2>\n            </div>\n            <div className=\"moveFormDiv\">\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"risk\">Trap Name:</label>\n                    <input className=\"formInput\" id=\"name\" required type=\"text\" placeholder=\"Trap Name\"/><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"desc\">Description:</label><br/>\n                        <textarea required id='desc' name=\"dexc\" rows=\"7\" cols=\"30\"></textarea>\n                    </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"reward\">Initial Piece Position</label>\n                    <input className=\"formInput\" required id=\"pos1\" type=\"text\" placeholder=\"f7, Ke1, etc.\"/><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"reward\">Final Piece Position</label>\n                    <input className=\"formInput\" required id=\"pos2\" type=\"text\" placeholder=\"f6, e2, etc.\"/><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"risk\">Risk Level:</label>\n                    <select className=\"formInput\" id=\"risk\" name=\"risklist\" form=\"moveForm\">\n                        <option value=\"low\">Low</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"high\">High</option>=\n                    </select><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"reward\">Reward Level:</label>\n                    <select className=\"formInput\" id=\"reward\" name=\"rewardlist\" form=\"moveForm\">\n                        <option value=\"low\">Low</option>\n                        <option value=\"medium\">Medium</option>\n                        <option value=\"high\">High</option>\n                    </select><br/>\n                </div>\n                <div className='inputDiv'>\n                    <label className=\"formLabel\" htmlFor=\"color\">Color to Play:</label>\n                    <select className=\"formInput\" id=\"color\" name=\"colorlist\" form=\"moveForm\">\n                        <option value=\"white\">White</option>\n                        <option value=\"black\">Black</option>\n                    </select><br/>\n                </div>\n            </div>\n            <div className='submitContainer'>\n                <input className=\"submitButton\" required type=\"submit\" value=\"Submit\"/>\n            </div>\n        </form>\n    );\n  }\n}\n\nexport default CreateMove;\n","import React, { Component } from 'react';\nimport './InformationPanel.scss';\n\nclass InformationPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n    this.printBestMove = this.printBestMove.bind(this);\n  }\n\n  printBestMove = () => {\n      let items = [];\n      //get data from props\n      if(this.props.bestMove.data) {\n          let n = this.props.bestMove.data.length;\n          let traps = [];\n          let risks = [];\n          let rewards = [];\n          let initialPos = [];\n          let finalPos = [];\n          let descs = [];\n          //organize lists of attributes\n          for (let i = 0; i < n; i++) {\n              traps.push(this.props.bestMove.data[i].trap.S);\n              risks.push(this.props.bestMove.data[i].risk.S);\n              rewards.push(this.props.bestMove.data[i].reward.S);\n              initialPos.push(this.props.bestMove.data[i].initialPosition.S);\n              finalPos.push(this.props.bestMove.data[i].finalPosition.S);\n              descs.push(this.props.bestMove.data[i].desc.S);\n          }\n          //print each trap from list of attributes\n          for (let i = 0; i < n; i++) {\n              items.push({\n                  name: traps[i],\n                  risk: risks[i],\n                  reward: rewards[i],\n                  initialPos: initialPos[i],\n                  finalPos: finalPos[i],\n                  desc: descs[i],\n              });\n          }\n      }\n      return items;\n  };\n\n  render(){\n    let colorSelectedHelper;\n    if (this.props.colorSelected === true){\n      colorSelectedHelper = 0;\n    }else if (this.props.colorSelected === false){\n      colorSelectedHelper = 1;\n    }\n    if (this.props.colorToMove === colorSelectedHelper){\n      let traps = this.printBestMove();\n      let n = traps.length;\n      let html = [];\n      let arrow = \" -> \"\n      //print each trap with an empty line between\n      for (let i = 0; i < n; i++) {\n        console.log(traps[i].name);\n          html.push(\n            <div className='trapBox' key={i+1}>\n              <div className='trapBorderExperiment'>\n                <div className='trapContent'>\n                  <h4 className='trapTitle'>{traps[i].name}</h4>\n                  <div className='trapInfoContainer'>\n                    <p className='trapInfo'>{traps[i].initialPos}{arrow}{traps[i].finalPos}</p>\n                    <p className=\"trapInfo\">Risk: {traps[i].risk}, Reward: {traps[i].reward}  </p>\n                    <p className=\"trapInfo\">{traps[i].desc}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n      }\n    //end of html\n      html.push(<div key = {n+1}></div>);\n\n      return (\n              <div className='infoContainer'>\n                <div className='infoTitle'>\n                  <h2>Available Traps</h2>\n                </div>\n                <div className='infoContentContainer'>\n                  {html}\n                </div>\n              </div>\n            );\n    }else if (this.props.colorToMove === 1){\n      return (<div className='infoContainer'>\n        <div className='infoTitle'>\n          <h2>Black To Move</h2>\n        </div>\n      </div>);\n    }else if (this.props.colorToMove === 0){\n      return (<div className='infoContainer'>\n        <div className='infoTitle'>\n          <h2>White To Move</h2>\n        </div>\n      </div>);\n    }\n  }\n}\n\nexport default InformationPanel\n","import React, { Component } from 'react';\nimport './StatusBox.scss';\n\nexport class StatusBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: this.props.status\n    }\n    this.disappear = this.disappear.bind(this);\n  }\n\n  disappear = () => {\n    if (this.props.status !== null) {\n      setTimeout(() => {\n        this.props.setStatus(null);\n      }, 2500)\n    }\n  }\n\n  render() {\n    this.disappear();\n    let statusBoxID = 'noStatusBox';\n    let titleID = 'successTitle';\n    let textID = 'successText';\n    let title = 'Success';\n    let text = 'Posted trap!'\n    if (this.props.status){\n      if (this.props.status === 'good'){\n        statusBoxID = 'successBox';\n      }\n      else {\n        statusBoxID = 'failBox';\n        titleID = 'failTitle';\n        textID = 'failText';\n        title = 'Error';\n        text = 'Trap not posted'\n      }\n    }\n    return (\n      <div className='box' id={statusBoxID}>\n        <div className=\"statusBoxInner\">\n          <p className=\"title\" id={titleID}>{title}</p>\n          <p className=\"text\" id={textID}>{text}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StatusBox;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './ToggleSwitch.css';\n\n/*\nToggle Switch Component\nNote: id, checked and onChange are required for ToggleSwitch component to function.\nThe props name, small, disabled and optionLabels are optional.\nUsage: <ToggleSwitch id={id} checked={value} onChange={checked => setValue(checked)}} />\n*/\n\nconst ToggleSwitch = ({ id, name, checked, onChange, optionLabels, small, disabled }) => {\n  function handleKeyPress(e){\n    if (e.keyCode !== 32) return;\n\n    e.preventDefault();\n    onChange(!checked)\n  }\n\n  return (\n    <div className={\"toggle-switch\" + (small ? \" small-switch\" : \"\")}>\n      <input\n        type=\"checkbox\"\n        name={name}\n        className=\"toggle-switch-checkbox\"\n        id={id}\n        checked={checked}\n        onChange={e => onChange(e.target.checked)}\n        disabled={disabled}\n        />\n        {id ? (\n          <label className=\"toggle-switch-label\"\n                 htmlFor={id}\n                 tabIndex={ disabled ? -1 : 1 }\n                 onKeyDown={ (e) => { handleKeyPress(e) }}>\n            <span\n              className={\n                disabled\n                  ? \"toggle-switch-inner toggle-switch-disabled\"\n                  : \"toggle-switch-inner\"\n              }\n              data-yes={optionLabels[0]}\n              data-no={optionLabels[1]}\n              tabIndex={-1}\n            />\n            <span\n              className={\n              disabled\n                ? \"toggle-switch-switch toggle-switch-disabled\"\n                : \"toggle-switch-switch\"\n              }\n              tabIndex={-1}\n            />\n          </label>\n        ) : null}\n      </div>\n    );\n}\n\n// Set optionLabels for rendering.\nToggleSwitch.defaultProps = {\n  optionLabels: [\"Play\", \"Create\"],\n};\n\nToggleSwitch.propTypes = {\n  id: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string,\n  optionLabels: PropTypes.array,\n  small: PropTypes.bool,\n  disabled: PropTypes.bool\n};\n\nexport default ToggleSwitch;\n","import './Dropdown.css'\nimport React, { Component } from 'react';\nimport _ from 'lodash';\n\n// fontawsome favicons\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\nlibrary.add(faBars);\n\n\nclass Dropdown extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      menuDown: false\n    }\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n\n  render(){\n    const items = [];\n    for (let [key,value] of this.props.boardStateLibrary.entries()){\n      items.push(\n        <button key = {key} className = \"dropdownMenuItem\" onClick = {() => {\n            this.props.setDefaultBoard(_.cloneDeep(value));\n            setTimeout(() => {            //using a setTimeout here because there's a bit of an async delay to setting the default board\n              this.props.pasteSnapshot();\n            }, 100)\n          }}>\n          <h2>{key}</h2>\n        </button>\n      );\n    }\n    return(\n      <div className = \"dropdownMenuContainer\">\n        <button className = 'snapshotButton' onClick = {this.toggle}><FontAwesomeIcon icon= \"bars\" size = \"3x\" /></button>\n        { this.state.menuDown && (\n          <div className = 'dropdownMenuContent'>\n            {items}\n            </div>)\n          }\n        </div>\n    )\n  }\n\n  toggle(){\n    let result = !this.state.menuDown;\n    this.setState(\n      {menuDown: result}\n    );\n  }\n}\n\nexport default Dropdown;\n","import './App.scss';\nimport Chessboard from './components/Chessboard/Chessboard.js';\nimport CreateMove from './components/CreateMove/CreateMove.js';\nimport InformationPanel from './components/InformationPanel/InformationPanel.js'\nimport StatusBox from './components/StatusBox/StatusBox.js'\nimport React, { useState, useRef } from 'react';\nimport ToggleSwitch from './components/Toggle/Toggle';\nimport Dropdown from './components/Dropdown/Dropdown.js';\n\n\n// fontawsome favicons\nimport { faHistory, faCamera, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { library } from '@fortawesome/fontawesome-svg-core';\n\nlibrary.add( faHistory, faCamera, faPlus);\n\n\nfunction App() {\n\n  const [positionHash, setHash] = useState(0);\n  const [bestMove, setBestMove] = useState(0);\n  const [viewOrCreate, setViewOrCreate] = useState(true);\n  const [colorToMove, setColorToMove] = useState(0);\n  const [whiteOrBlack, setWhiteOrBlack] = useState(true);\n  const [status, setStatus] = useState(null);\n  const [defaultBoard, setDefaultBoard] = useState({\n    piecePositions:\n      [\n        [[1,5], [1,3], [1,4], [1,9], [1,10], [1,4], [1,3], [1,5]],\n        [[1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1]],\n        [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n        [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n        [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n        [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n        [[0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1]],\n        [[0,5], [0,3], [0,4], [0,9], [0,10], [0,4], [0,3], [0,5]]\n      ],\n      auxBoardState: [true,true,0,null],\n      castling: [true, true, true, true]\n  });\n  const [boardStateLibrary, setBoardStateLibrary] = useState(new Map([\n    [ \"Starting Position\",\n      {piecePositions:\n        [\n          [[1,5], [1,3], [1,4], [1,9], [1,10], [1,4], [1,3], [1,5]],\n          [[1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1], [1,1]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2], [2,2]],\n          [[0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1], [0,1]],\n          [[0,5], [0,3], [0,4], [0,9], [0,10], [0,4], [0,3], [0,5]]\n        ],\n        auxBoardState: [true,true,0,null],\n        castling: [true, true, true, true]}\n    ]\n  ]));\n\n  const boardReference = useRef();\n\n  return (\n    <>\n      <StatusBox status={status} setStatus={setStatus}/>\n      <div className=\"App\">\n        <div className=\"leftSide\" >\n          <div className=\"snapshotButtons\">\n            <button className = \"snapshotButton\" onClick = {() => boardReference.current.pasteSnapshot()}><FontAwesomeIcon icon=\"history\" size = \"3x\"/></button>\n            <button className = \"snapshotButton\" onClick = {() => boardReference.current.copySnapshot()}><FontAwesomeIcon icon=\"camera\" size = \"3x\"/></button>\n            < Dropdown className = \"snapshotButton\" boardStateLibrary = {boardStateLibrary} setDefaultBoard = {setDefaultBoard} pasteSnapshot={() => boardReference.current.pasteSnapshot()}/>\n            <button className = \"snapshotButton\" onClick = {\n              () => {\n                boardReference.current.addToBoardLibrary(document.getElementById(\"positionName\").value);\n                document.getElementById(\"positionName\").value = '';\n              }\n            }>\n              <FontAwesomeIcon icon=\"plus\" size = \"3x\"/>\n            </button>\n            <input className=\"positionInput\" id=\"positionName\" required type=\"text\" placeholder=\"Position Name\"/>\n          </div>\n        <div>\n          < Chessboard ref = {boardReference} setPositionHash={setHash}\n          setBestMove={setBestMove} setColorToMove = {setColorToMove}\n          defaultBoard = {defaultBoard} setDefaultBoard = {setDefaultBoard}\n          boardStateLibrary = {boardStateLibrary} setBoardStateLibrary = {setBoardStateLibrary}/>\n        </div>\n        </div>\n        <div className=\"rightSide\">\n          {viewOrCreate===false ? (\n          <>\n            <div className=\"formComponentContainer\" >\n              < CreateMove boardState={positionHash} setStatus={setStatus}/>\n            </div>\n          </>\n          ) : (\n          <>\n            <div className = \"infoComponentContainer\">\n              <InformationPanel  bestMove={bestMove} colorToMove = {colorToMove} colorSelected = {whiteOrBlack}/>\n            </div>\n          </>\n          )}\n          <div className=\"toggles\">\n            <div className=\"toggleRowContainer\">\n              <p className='toggleLabel'>Mode:</p>\n              <div className=\"toggleContainer\">\n                <ToggleSwitch id='functionToggle' checked={viewOrCreate} onChange={setViewOrCreate}/>\n              </div>\n            </div>\n            <div className=\"toggleRowContainer\">\n              <p className='toggleLabel'>Playing as:</p>\n              <div className=\"toggleContainer\">\n                <ToggleSwitch id='colorToggle' checked={whiteOrBlack} onChange={setWhiteOrBlack} optionLabels = {['white','black']}/>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}